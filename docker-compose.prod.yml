services:
  api:
    build:
      target: production
    environment:
      # Production settings
      ENV: production
      LOG_LEVEL: INFO
      # Production CORS
      ALLOWED_ORIGINS: https://cognitive-drift.app
    # No volume mounts in production
    volumes:
      - glitch_logs:/app/logs
    # Production command (no reload)
    command: ["uv", "run", "uvicorn", "src.glitch_core.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

  qdrant:
    # Production Qdrant settings
    environment:
      QDRANT__STORAGE__OPTIMIZERS__DELETED_THRESHOLD: 0.9
      QDRANT__STORAGE__OPTIMIZERS__VACUUM_MIN_VECTOR_NUMBER: 1000
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  redis:
    # Production Redis settings
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 1G

  ollama:
    # Production Ollama settings
    environment:
      OLLAMA_NUM_PARALLEL: 2
      OLLAMA_MAX_LOADED_MODELS: 2
      OLLAMA_KEEP_ALIVE: 48h
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 3G

  nginx:
    profiles: ["production"]
    # Production nginx configuration
    environment:
      NGINX_HOST: ${NGINX_HOST:-localhost}
      NGINX_PORT: ${NGINX_PORT:-80}
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/api.prod.conf:/etc/nginx/conf.d/default.conf:ro

  prometheus:
    profiles: ["monitoring"]
    # Production monitoring settings
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'  # Longer retention for production
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    deploy:
      resources:
        limits:
          memory: 1G 