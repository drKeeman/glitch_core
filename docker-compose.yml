version: '3.8'

services:
  # Main API service
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: glitch-api
    ports:
      - "8000:8000"
    environment:
      # Database connections
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379
      
      # LLM integration
      OLLAMA_URL: http://ollama:11434
      OLLAMA_MODEL: llama3.2:3b
      
      # App config
      ENV: ${ENV:-staging}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_PREFIX: /api/v1
      
      # CORS origins (staging vs prod)
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,https://cognitive-drift.app}
      
      # WebSocket config
      WS_HEARTBEAT_INTERVAL: 30
      
    volumes:
      # Mount source for hot reload in dev
      - ${PWD}/src:/app/src:ro
      - ${PWD}/experiments:/app/experiments
      # Logs persistence
      - glitch_logs:/app/logs
      
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
        
    restart: unless-stopped
    
    # Resource limits for VM
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Vector database for memory storage
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: glitch-qdrant
    ports:
      - "6333:6333"    # HTTP API
      - "6334:6334"    # gRPC (if needed)
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      # Single-node setup (no clustering)
      QDRANT__CLUSTER__ENABLED: false
      # Memory optimizations for 8GB VM
      QDRANT__STORAGE__OPTIMIZERS__DELETED_THRESHOLD: 0.9
      QDRANT__STORAGE__OPTIMIZERS__VACUUM_MIN_VECTOR_NUMBER: 1000
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    
    # Qdrant can be memory hungry
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 1G

  # Cache layer for active context
  redis:
    image: redis:7.2-alpine
    container_name: glitch-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Local LLM inference
  ollama:
    image: ollama/ollama:0.1.17
    container_name: glitch-ollama
    ports:
      - "11434:11434"
    environment:
      # Memory management for 8GB VM
      OLLAMA_NUM_PARALLEL: 1
      OLLAMA_MAX_LOADED_MODELS: 1
      # Keep model loaded to avoid cold starts
      OLLAMA_KEEP_ALIVE: 24h
    volumes:
      - ollama_models:/root/.ollama
      # GPU support if available (optional)
      # - /dev/nvidia0:/dev/nvidia0
    restart: unless-stopped
    
    # Most memory-hungry service
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G

  # Reverse proxy + SSL termination
  nginx:
    image: nginx:1.25-alpine
    container_name: glitch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
    restart: unless-stopped

  # Monitoring (optional, can disable in resource-constrained env)
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: glitch-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'  # Short retention for VM
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    profiles: ["monitoring"]  # Optional service
    
    deploy:
      resources:
        limits:
          memory: 512M

volumes:
  # Persistent data
  qdrant_storage:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  
  # Logs and monitoring
  glitch_logs:
    driver: local
  nginx_certs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local

networks:
  default:
    name: glitch-network
    driver: bridge 